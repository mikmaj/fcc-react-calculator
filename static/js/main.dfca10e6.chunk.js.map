{"version":3,"sources":["components/Button/Button.js","components/Buttons/Buttons.js","components/Screen/Screen.js","components/CalculatorContainer/CalculatorContainer.js","App.js","serviceWorker.js","index.js"],"names":["Button","react_default","a","createElement","id","this","props","onClick","className","data-size","size","data-value","value","label","Component","Buttons","children","Screen","string","data","CalculatorContainer","state","operations","calculate","result","_this","join","math","eval","format","precision","setState","handleClick","e","target","getAttribute","newOperations","concat","Object","toConsumableArray","components_Screen_Screen","components_Buttons_Buttons","components_Button_Button","App","components_CalculatorContainer_CalculatorContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dfca10e6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Button extends Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                id={this.props.id}\r\n                onClick={this.props.onClick}\r\n                className=\"Button\"\r\n                data-size={this.props.size}\r\n                data-value={this.props.value}\r\n            >\r\n                {this.props.label}   \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button;","import React, { Component } from 'react';\r\n\r\nclass Buttons extends Component {\r\n    render() {\r\n        return (\r\n            <div id={this.props.id} className=\"Buttons\">\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Buttons;","import React, { Component } from 'react';\r\n\r\nclass Screen extends Component {\r\n    render() {\r\n        const string = this.props.data\r\n        return (\r\n            <div id={this.props.id} className=\"Display\">\r\n                {string}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Screen;","import React, { Component } from 'react';\r\nimport math from 'mathjs'\r\n\r\nimport './CalculatorContainer.css'\r\nimport Button from '../Button/Button'\r\nimport Buttons from '../Buttons/Buttons'\r\nimport Screen from '../Screen/Screen'\r\n\r\nclass CalculatorContainer extends Component {\r\n    state = {\r\n        operations: []\r\n    }\r\n\r\n    calculate = () => {\r\n        let result = this.state.operations.join('')\r\n        if (result) {\r\n            result = math.eval(result)\r\n            result = math.format(result, { precision: 14 })\r\n            this.setState({\r\n                operations: [result]\r\n            })\r\n        }\r\n    }\r\n\r\n    handleClick = e => {\r\n        const value = e.target.getAttribute('data-value')\r\n        switch (value) {\r\n            case 'clear':\r\n                this.setState({\r\n                    operations: []\r\n                })\r\n                break\r\n            case '=':\r\n                this.calculate()\r\n                break\r\n            default:\r\n                const newOperations = [...this.state.operations, value]\r\n                this.setState({\r\n                    operations: newOperations\r\n                })\r\n                break\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <Screen id=\"display\" data={this.state.operations} />\r\n                <Buttons id=\"buttons\">\r\n                    <Button id=\"clear\" onClick={this.handleClick} label=\"C\" value=\"clear\" />\r\n                    <Button id=\"divide\" onClick={this.handleClick} label=\"/\" value=\"/\" />\r\n                    <Button id=\"multiply\" onClick={this.handleClick} label=\"*\" value=\"*\" />\r\n                    <Button id=\"seven\" onClick={this.handleClick} label=\"7\" value=\"7\" />\r\n                    <Button id=\"eight\" onClick={this.handleClick} label=\"8\" value=\"8\" />\r\n                    <Button id=\"nine\" onClick={this.handleClick} label=\"9\" value=\"9\" />\r\n                    <Button id=\"subtract\" onClick={this.handleClick} label=\"-\" value=\"-\" />\r\n                    <Button id=\"four\" onClick={this.handleClick} label=\"4\" value=\"4\" />\r\n                    <Button id=\"five\" onClick={this.handleClick} label=\"5\" value=\"5\" />\r\n                    <Button id=\"six\" onClick={this.handleClick} label=\"6\" value=\"6\" />\r\n                    <Button id=\"add\" onClick={this.handleClick} label=\"+\" value=\"+\" />\r\n                    <Button id=\"one\" onClick={this.handleClick} label=\"1\" value=\"1\" />\r\n                    <Button id=\"two\" onClick={this.handleClick} label=\"2\" value=\"2\" />\r\n                    <Button id=\"three\" onClick={this.handleClick} label=\"3\" value=\"3\" />\r\n                    <Button id=\"equals\" onClick={this.handleClick} label=\"=\" value=\"=\" />\r\n                    <Button id=\"zero\" onClick={this.handleClick} label=\"0\" value=\"0\" />\r\n                    <Button id=\"decimal\" onClick={this.handleClick} label=\".\" value=\".\" />\r\n                </Buttons>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CalculatorContainer;","import React, { Component } from 'react';\nimport './App.css';\n\nimport CalculatorContainer from './components/CalculatorContainer/CalculatorContainer'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <CalculatorContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}